---
description: 
globs: 
alwaysApply: false
---
# 🧠 MCP Tool Prompt — Yonder Plot Search

You’re building an MCP-compatible tool that allows agents like Claude to search for land plots stored in a Supabase database. The database includes location, pricing, and enriched metadata about nearby services stored as structured JSON.

---

## ✅ Goal

Create a TypeScript-based MCP server using the `@modelcontextprotocol/sdk`. The server should expose a tool called `search_plots` that lets an AI search for land plots using the following filters:

- Maximum price (in EUR)
- Minimum land size (in square meters)
- Boolean filters for the presence of nearby features, such as coastline, restaurants, or supermarkets

The underlying data is stored in Supabase, and all nearby-feature data is structured inside a `jsonb` column named `enrichment_data`.

---

## 📦 Table: `plots`

The `plots` table contains the following fields:

- `id`: unique plot ID (UUID)
- `bubble_id`: client-facing unique identifier (text)
- `latitude`: latitude coordinate (number)
- `longitude`: longitude coordinate (number)
- `environment`: version/environment tag (default: `version-test`)
- `geom`: autogenerated geometry point from lat/lon
- `price`: plot price (numeric, in EUR)
- `size`: land area (numeric, in square meters)
- `enrichment_data`: JSONB column with nearby-location metadata

---

## 🌍 Enrichment Structure

Each row has an `enrichment_data` field structured like this:

- Keys represent categories of nearby features (e.g. `cafe`, `airport`, `coastline`)
- Each value may include:
  - `distance`: number (meters)
  - `nearest_point`: object containing `lat`, `lon`, and optionally `name` or `type`

If a given feature is present and has a `distance` value, it means the feature is “nearby.” If the field is missing or `distance` is undefined, it is considered “not nearby.”

---

## 🔧 Tool: `search_plots`

This tool accepts the following parameters as input:

- `max_price_eur`: optional number
- `min_size_m2`: optional number
- `near_coastline`: optional boolean
- `near_beach`: optional boolean
- `near_airport`: optional boolean
- `near_main_town`: optional boolean
- `near_public_transport`: optional boolean
- `near_supermarket`: optional boolean
- `near_convenience_store`: optional boolean
- `near_restaurant_or_fastfood`: optional boolean
- `near_cafe`: optional boolean

Each boolean parameter represents whether the corresponding feature must be present in the `enrichment_data` for the plot to qualify. For example, if `near_cafe` is true, the plot must contain a valid `distance` value under `enrichment_data.cafe`.

Only the filters that are provided should be applied. If a filter is not present, it should not be used in the query.

---

## 🔁 Matching Logic

The query should dynamically include only the parameters provided. For example:

- If `max_price_eur` is provided, include a condition to filter plots priced below or equal to that amount.
- If `near_coastline` is true, include a condition to check that `enrichment_data->'coastline'->>'distance'` is not null.
- If both `near_public_transport` and `near_supermarket` are true, ensure both corresponding enrichment fields have non-null distances.

These conditions should be combined using `AND`.

---

## 📤 Output

Return an array of matching plots. Each result should include:

- `id`
- `latitude`
- `longitude`
- `price`
- `size`
- `enrichment_data`
- Optional: `title`, `location_label`, `image_urls` if available